set nocompatible                    " avoid crazy vi backwards compatibility stuff

" misc
syntax enable                       " enable syntax highlighting
set background=light                " set light background
set backspace=2                     " set backspace
set cursorline                      " highlight current cursor line
set directory=$HOME/.vim/tmp//,.    " keep swap files in one location
set expandtab                       " expand tab to spaces in insert mode
set hidden                          " nicer multiple buffer handling
set ignorecase                      " case-insensitive searching
set isk+=_,$,@,%,#,-                " mark rubyisms as keywords
set laststatus=2                    " always display status line
set list listchars=tab:\ \ ,trail:‚ê£ " show trailing whitespace
let mapleader=','                   " more accessible leader character
set number                          " show line numbers
set nobackup                        " do not make a backup before overwriting a file
set noswapfile                      " do not create swap files
set nowrap                          " do not wrap lines
set nowritebackup                   " do not make a backup before overwriting a file
set ruler                           " show cursor position
set showcmd                         " display incomplete commands
set shiftwidth=2                    " number of spaces used for each step in indentation
set showmode                        " display the current mode
set smartcase                       " case-sensitive searching when expression contains capital letters
set smartindent                     " more clever auto-indenting behavior
set smarttab                        " tabs in an indent insert 'shiftwidth' spaces
set softtabstop=2                   " number of spaces to insert for a tab
set statusline=[%n]\ %<%.99f\%h%w%m%r%y\%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l/%L,%c-%v\%)
set tabstop=2                       " number of spaces a tab stands for
set visualbell                      " use visual rather than audible bell
set wildmenu                        " command line tab completion
set wildmode=longest,full           " file name tab completion

filetype plugin indent on           " enable filetype detection for syntax and indent rules

" keymappings for lusty stuff
nmap <silent> <Leader>f :LustyFilesystemExplorer<CR>
nmap <silent> <Leader>b :LustyBufferExplorer<CR>
nmap <silent> <Leader>r :LustyFilesystemExplorerFromHere<CR>
nmap <silent> <Leader>g :LustyBufferGrep<CR>
nmap <silent> <Leader>j :LustyJuggler<CR>
nmap <silent> <TAB>     :LustyJugglePrevious<CR>

" color scheme
" [Black, Blue, Green, Cyan, Red, Magenta, Brown, Grey, Yellow, White]
hi clear
hi Comment      ctermbg=none  ctermfg=Grey  cterm=none
hi CursorLine   ctermbg=none  ctermfg=none  cterm=bold
hi LineNr       ctermbg=none  ctermfg=Grey  cterm=none
hi ModeMsg      ctermbg=none  ctermfg=Grey  cterm=bold
hi MoreMsg      ctermbg=none  ctermfg=Grey  cterm=bold
hi NonText      ctermbg=none  ctermfg=Grey  cterm=bold
hi Question     ctermbg=none  ctermfg=Grey  cterm=bold
hi Special      ctermbg=none  ctermfg=Grey  cterm=bold
hi SpecialKey   ctermbg=Grey  ctermfg=Black cterm=none
hi StatusLine   ctermbg=Grey  ctermfg=Black cterm=bold
hi StatusLineNC ctermbg=Grey  ctermfg=Black cterm=none
hi VertSplit    ctermbg=Grey  ctermfg=Grey  cterm=none

" jump to last known position after opening file if '" mark is set
:au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" use pathogen to handle plugins
call pathogen#runtime_append_all_bundles()

" nice auto-magic tab completion
function! SuperCleverTab()
  " check if at beginning of line
  if col('.') == 1
    return "\<Tab>"
  " check if previous character is whitespace
  elseif strpart( getline('.'), col('.')-2, 1 ) == ' '
    return "\<Tab>"
  else
    if &omnifunc != ''
      " omni-completion
      return "\<C-X>\<C-O>"
    elseif &dictionary != ''
      " dictionary completion
      return "\<C-K>"
    else
      " known-word completion
      return "\<C-N>"
    endif
  endif
endfunction
inoremap <Tab> <C-R>=SuperCleverTab()<cr>

" Source vimrc file after saving changes
" http://vimcasts.org/episodes/updating-your-vimrc-file-on-the-fly/
if has("autocmd")
  autocmd bufwritepost ~/dotfiles/lib/vimrc source $MYVIMRC
endif
